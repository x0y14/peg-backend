// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: supervisor/v1/supervisor.proto

package supervisorv1connect

import (
	v1 "backend/gen/supervisor/v1"
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SupervisorServiceName is the fully-qualified name of the SupervisorService service.
	SupervisorServiceName = "supervisor.v1.SupervisorService"
)

// SupervisorServiceClient is a client for the supervisor.v1.SupervisorService service.
type SupervisorServiceClient interface {
	Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error)
	ServerStreamPing(context.Context, *connect_go.Request[v1.ServerStreamPingRequest]) (*connect_go.ServerStreamForClient[v1.ServerStreamPingResponse], error)
}

// NewSupervisorServiceClient constructs a client for the supervisor.v1.SupervisorService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSupervisorServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SupervisorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &supervisorServiceClient{
		ping: connect_go.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+"/supervisor.v1.SupervisorService/Ping",
			opts...,
		),
		serverStreamPing: connect_go.NewClient[v1.ServerStreamPingRequest, v1.ServerStreamPingResponse](
			httpClient,
			baseURL+"/supervisor.v1.SupervisorService/ServerStreamPing",
			opts...,
		),
	}
}

// supervisorServiceClient implements SupervisorServiceClient.
type supervisorServiceClient struct {
	ping             *connect_go.Client[v1.PingRequest, v1.PingResponse]
	serverStreamPing *connect_go.Client[v1.ServerStreamPingRequest, v1.ServerStreamPingResponse]
}

// Ping calls supervisor.v1.SupervisorService.Ping.
func (c *supervisorServiceClient) Ping(ctx context.Context, req *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// ServerStreamPing calls supervisor.v1.SupervisorService.ServerStreamPing.
func (c *supervisorServiceClient) ServerStreamPing(ctx context.Context, req *connect_go.Request[v1.ServerStreamPingRequest]) (*connect_go.ServerStreamForClient[v1.ServerStreamPingResponse], error) {
	return c.serverStreamPing.CallServerStream(ctx, req)
}

// SupervisorServiceHandler is an implementation of the supervisor.v1.SupervisorService service.
type SupervisorServiceHandler interface {
	Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error)
	ServerStreamPing(context.Context, *connect_go.Request[v1.ServerStreamPingRequest], *connect_go.ServerStream[v1.ServerStreamPingResponse]) error
}

// NewSupervisorServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSupervisorServiceHandler(svc SupervisorServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/supervisor.v1.SupervisorService/Ping", connect_go.NewUnaryHandler(
		"/supervisor.v1.SupervisorService/Ping",
		svc.Ping,
		opts...,
	))
	mux.Handle("/supervisor.v1.SupervisorService/ServerStreamPing", connect_go.NewServerStreamHandler(
		"/supervisor.v1.SupervisorService/ServerStreamPing",
		svc.ServerStreamPing,
		opts...,
	))
	return "/supervisor.v1.SupervisorService/", mux
}

// UnimplementedSupervisorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSupervisorServiceHandler struct{}

func (UnimplementedSupervisorServiceHandler) Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("supervisor.v1.SupervisorService.Ping is not implemented"))
}

func (UnimplementedSupervisorServiceHandler) ServerStreamPing(context.Context, *connect_go.Request[v1.ServerStreamPingRequest], *connect_go.ServerStream[v1.ServerStreamPingResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("supervisor.v1.SupervisorService.ServerStreamPing is not implemented"))
}
